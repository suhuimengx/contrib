# -*- Mode: python; py-indent-offset: 4; indent-tabs-mode: nil; coding: utf-8; -*-

def build(bld):

    # Register 'protocols' module with dependencies
    module = bld.create_ns3_module('sag-datalink', ['core', 'internet', 'applications', 'point-to-point', 'traffic-control'])

    # Source files
    module.source = [    	
    	##### link & physical #####
	# gsl link & gsl channel parent
    	'model/sag_link_layer_gsl.cc',
    	'model/sag_link_layer.cc',
    	
    	'model/sag_phy/sag_bbframe_conf.cc',
    	'model/sag_phy/sag_link_results.cc',
    	'model/sag_phy/sag_lookup_table.cc',
    	'model/sag_phy/sag_mutual_information.cc',
    	'model/sag_phy/sag_waveform_conf.cc',
    	'model/sag_phy/satellite-env-variables.cc',
    	'model/sag_phy/satellite-output-fstream-string-container.cc',
    	'model/sag_phy/satellite-output-fstream-wrapper.cc',
    	
    	# aloha
    	'model/sag_aloha/sag_aloha_header.cc',
        'model/sag_aloha/sag_aloha_net_device.cc',
        'model/sag_aloha/sag_aloha_channel.cc',
        
        # lldp
        'helper/lldp_configure/lldp_configure.cc',
    	'model/sag_lldp/sag_lldp.cc',
    	'model/sag_lldp/sag_rx_sm.cc',
    	'model/sag_lldp/sag_tx_sm.cc',
    	'model/sag_lldp/sag_lldp_port.cc',
    	'model/sag_lldp/sag_tlv_content.cc',
    	'model/sag_lldp/sag_tlv_struct.cc',
    	'model/sag_lldp/sag_packet.cc',
        
        # csma
        'model/sag_csma/sag_csma_net_device.cc',
        'model/sag_csma/sag_csma_header.cc',
        'model/sag_csma/sag_csma_channel.cc',
        'model/sag_csma/sag_csma_backoff.cc',
    	
        # ppp
        'helper/sag_ppp_helper/point-to-point-laser-helper.cc',
        'model/sag_ppp/point-to-point-laser-net-device.cc',
        'model/sag_ppp/point-to-point-laser-channel.cc',
        'model/sag_ppp/point-to-point-laser-remote-channel.cc',
        
        # hdlc
        'model/sag_hdlc/hdlc_netdevice.cc',
        'model/sag_hdlc/hdlc_channel.cc',
        'model/sag_hdlc/hdlc_header.cc',


        ]

    # Header files
    headers = bld(features='ns3header')
    headers.module = 'sag-datalink'
    headers.source = [

	##### link & physical #####
	# gsl link & gsl channel parent
        'model/sag_link_layer_gsl.h',
        
        'model/sag_link_layer.h',
        
        'model/sag_phy/sag_bbframe_conf.h',
    	'model/sag_phy/sag_link_results.h',
    	'model/sag_phy/sag_link_results_test.h',
    	'model/sag_phy/sag_lookup_table.h',
    	'model/sag_phy/sag_mutual_information.h',
    	'model/sag_phy/sag_waveform_conf.h',
    	'model/sag_phy/satellite-env-variables.h',
    	'model/sag_phy/satellite-output-fstream-string-container.h',
    	'model/sag_phy/satellite-output-fstream-wrapper.h',
    	'model/sag_phy/sag_enums.h',
    	'model/sag_phy/sag_utils.h',
        
	# aloha
        'model/sag_aloha/sag_aloha_header.h',
        'model/sag_aloha/sag_aloha_net_device.h',
        'model/sag_aloha/sag_aloha_channel.h',
        
         #lldp
    	'helper/lldp_configure/lldp_configure.h',
        'model/sag_lldp/sag_lldp.h',
        'model/sag_lldp/sag_lldp_port.h',
        'model/sag_lldp/sag_rx_sm.h',
        'model/sag_lldp/sag_tx_sm.h',
        'model/sag_lldp/sag_tlv_content.h',
        'model/sag_lldp/sag_tlv_struct.h',
        'model/sag_lldp/sag_packet.h',
        
        # csma
        'model/sag_csma/sag_csma_net_device.h',
        'model/sag_csma/sag_csma_header.h',
        'model/sag_csma/sag_csma_channel.h',
        'model/sag_csma/sag_csma_backoff.h',
        
        # ppp
        'helper/sag_ppp_helper/point-to-point-laser-helper.h',
		'model/sag_ppp/point-to-point-laser-net-device.h',
        'model/sag_ppp/point-to-point-laser-channel.h',
        'model/sag_ppp/point-to-point-laser-remote-channel.h',
        
        # hdlc
        'model/sag_hdlc/hdlc_netdevice.h',
        'model/sag_hdlc/hdlc_channel.h',
        'model/sag_hdlc/hdlc_header.h',

      
        ]

    # Tests
    # module_test = bld.create_ns3_module_test_library('protocols')
    # module_test.source = [
    #   'test/basic-sim-test-suite.cc',
    #    ]

    # Main
    #bld.recurse('main')

    # Examples
    #if bld.env.ENABLE_EXAMPLES:
    #    bld.recurse('examples')

    # For now, no Python bindings are generated
    # bld.ns3_python_bindings()
